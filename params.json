{"name":"Delorean","tagline":"","body":"DeLorean\r\n=======\r\n\r\n[![Build Status](https://travis-ci.org/florent37/DeLorean.svg)](https://travis-ci.org/florent37/DeLorean)\r\n\r\nWORK IN PROGRESS\r\n\r\nDownload\r\n--------\r\n\r\nIn your root build.gradle add\r\n```groovy\r\nrepositories {\r\n    maven {\r\n        url  \"http://dl.bintray.com/florent37/maven\"\r\n    }\r\n}\r\n```\r\n\r\nProtocol-based Exchange\r\n--------\r\n\r\nDeLorean il based on data exchanges by protocol.\r\nYou have to create your protocol, wich will be used by your wear and smartphone module.\r\n\r\n```java\r\npublic interface WearProtocol{\r\n    public void sayHello();\r\n\r\n    public void sayGoodbye(int delay, String text, MyObject myObject);\r\n}\r\n```\r\n\r\nThen copy it in your 2 modules.\r\n\r\nDon't forget to copy your models into the two modules\r\n```java\r\npublic class MyObject{\r\n    private String name;\r\n\r\n    public MyObject(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n}\r\n```\r\n\r\nSetup\r\n--------\r\n\r\n**Wear - Activity**\r\n\r\nTo use DeLorean, you have to create an new instance for each activity\r\nand attach it to his life-cycle\r\n\r\n```java\r\npublic class MainActivity extends Activity {\r\n\r\n    private DeLorean deLorean = new DeLorean();\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        deLorean.onCreate(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        deLorean.onDestroy();\r\n    }\r\n}\r\n```\r\n\r\n**Smartphone - Service**\r\n\r\nCreate an new instance in the WearableListenerService\r\nand attach it to his life-cycle,\r\ndon't foget to dispatch onMessageReceived(x) and onDataChanged(x)\r\n\r\n```java\r\npublic class WearService extends WearableListenerService {\r\n\r\n    private DeLorean deLorean = new DeLorean();\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        deLorean.onCreate(this);\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        deLorean.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onMessageReceived(MessageEvent messageEvent) {\r\n        super.onMessageReceived(messageEvent);\r\n        //on WearableListenerService you have to dispatch onMessageReceived(x)\r\n        deLorean.onMessageReceived(messageEvent);\r\n    }\r\n\r\n    @Override\r\n    public void onDataChanged(DataEventBuffer dataEvents) {\r\n        super.onDataChanged(dataEvents);\r\n        //on WearableListenerService you have to dispatch onDataChanged(x)\r\n        deLorean.onDataChanged(dataEvents);\r\n    }\r\n}\r\n```\r\n\r\nSend datas\r\n--------\r\n\r\nTo send datas, just create a Sender\r\n\r\n```java\r\nWearProtocol wearProtocol = deLorean.createSender(WearProtocol.class);\r\n```\r\n\r\nAnd simply call method on the implemented protocol\r\n```java\r\nwearProtocol.sayHello();\r\n```\r\nCan be used with parameters\r\n```java\r\nwearProtocol.sayGoodbye(3,\"bye\", new MyObject(\"DeLorean\"));\r\n```\r\n\r\nReceive datas\r\n--------\r\n\r\nTo receive datas, simply register a Receiver\r\n\r\n```java\r\ndeLorean.registerReceiver(WearProtocol.class,new WearProtocol() {\r\n    @Override\r\n    public void sayHello() {\r\n        Log.d(TAG,\"sayHello\");\r\n    }\r\n\r\n    @Override\r\n    public void sayGoodbye(int delay, String text, MyObject myObject) {\r\n        Log.d(TAG,\"sayGoodbye \"+delay+\" \"+text+\" \"+myObject.getName());\r\n    }\r\n});\r\n```\r\n\r\nOr directly implement it\r\n```java\r\npublic class WearService extends WearableListenerService implements WearProtocol {\r\n    ...\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        deLorean.onCreate(this);\r\n        deLorean.registerReceiver(WearProtocol.class,this);\r\n    }\r\n\r\n    @Override\r\n    public void sayHello() {\r\n        Log.d(TAG,\"sayHello\");\r\n    }\r\n\r\n    @Override\r\n    public void sayGoodbye(int delay, String text, MyObject myObject) {\r\n        Log.d(TAG,\"sayGoodbye \"+delay+\" \"+text+\" \"+myObject.getName());\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nTODO\r\n--------\r\n\r\nCommunity\r\n--------\r\n\r\nLooking for contributors, feel free to fork !\r\n\r\nWear\r\n--------\r\n\r\nIf you want to learn wear development : [http://tutos-android-france.com/developper-une-application-pour-les-montres-android-wear/][tuto_wear].\r\n\r\nDependencies\r\n--------\r\n\r\n- GSON from Google : [https://github.com/google/gson][gson]\r\n\r\nCredits\r\n-------\r\n\r\nAuthor: Florent Champigny\r\n\r\n<a href=\"https://plus.google.com/+florentchampigny\">\r\n  <img alt=\"Follow me on Google+\"\r\n       src=\"https://raw.githubusercontent.com/florent37/DaVinci/master/mobile/src/main/res/drawable-hdpi/gplus.png\" />\r\n</a>\r\n<a href=\"https://twitter.com/florent_champ\">\r\n  <img alt=\"Follow me on Twitter\"\r\n       src=\"https://raw.githubusercontent.com/florent37/DaVinci/master/mobile/src/main/res/drawable-hdpi/twitter.png\" />\r\n</a>\r\n<a href=\"https://www.linkedin.com/profile/view?id=297860624\">\r\n  <img alt=\"Follow me on LinkedIn\"\r\n       src=\"https://raw.githubusercontent.com/florent37/DaVinci/master/mobile/src/main/res/drawable-hdpi/linkedin.png\" />\r\n</a>\r\n\r\n\r\nPictures by Logan Bourgouin\r\n\r\n<a href=\"https://plus.google.com/+LoganBOURGOIN\">\r\n  <img alt=\"Follow me on Google+\"\r\n       src=\"https://raw.githubusercontent.com/florent37/DaVinci/master/mobile/src/main/res/drawable-hdpi/gplus.png\" />\r\n</a>\r\n\r\nLicense\r\n--------\r\n\r\n    Copyright 2015 florent37, Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n[snap]: https://oss.sonatype.org/content/repositories/snapshots/\r\n[tuto_wear]: http://tutos-android-france.com/developper-une-application-pour-les-montres-android-wear/\r\n[gson]: https://github.com/google/gson","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}